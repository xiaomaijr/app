<?php/** * Created by PhpStorm. * User: zhangxiao-pc * Date: 2016/3/15 * Time: 10:07 */namespace api\models;use common\models\ApiBaseException;use common\models\ApiErrorDescs;use common\models\ApiUtils;use common\models\BorrowInfo;use common\models\BorrowInvest;use common\models\Escrow;use common\models\EscrowAccount;use common\models\InvestDeta;use common\models\MemberMoney;use common\models\Members;use common\models\UrlConfig;use yii\base\Component;class InvestInter extends Component{    /**     * 投资处理方法     * @param $uid     * @param $borrow_id     * @param $money     * @param int $_is_auto     * @param int $hongbao_id     * @return bool|mixed     */    public function investMoneyThird($uid, $borrowId, $money, $_is_auto = 0){        $investId = $this->_investProcess($uid, $borrowId, $money, $_is_auto);        if(empty($investId)){            throw new ApiBaseException(ApiErrorDescs::ERR_INVEST_FAIL);        }        //发送到乾多多        $orders = date("YmdHi").$investId.'_'.$borrowId.'_'.$uid;        $bInfo = BorrowInfo::get($borrowId);        $investQdd = EscrowAccount::getUserThirdAccout($uid);        $borrowQdd = EscrowAccount::getUserThirdAccout($bInfo['borrow_uid']);        $loan = new Escrow();        $loanList = $loan->loanJsonList($investQdd['qdd_marked'],$borrowQdd['qdd_marked'],$orders,$borrowId,$money,$bInfo['borrow_money'],'投标',"对{$borrowId}号投标");        $loanJsonList = json_encode($loanList);        $returnURL = '/Notice/investReturn';        $notifyURL = UrlConfig::getUrl('qdd_notify') . '/Notify/investNotify';        $data['params'] =  http_build_query($loan->transfer($loanJsonList, $returnURL , $notifyURL));        $data['url'] = $loan->urlArr['transfer'];        return $data;    }    /**     * 投资处理方法     * @param $uid     * @param $borrow_id     * @param $money     * @param int $_is_auto     * @param int $hongbao_id     * @return bool|mixed     */    private function _investProcess($uid, $borrow_id, $money, $_is_auto = 0){        $binfo  = BorrowInfo::getDataByID($borrow_id);        $vminfo = MemberMoney::getUserMoney($uid);        $recommend = Members::get(['id'=>$uid]);        $recommend_id = $recommend['recommend_id'];        if ( $vminfo['available_money']  < $money ){            throw new ApiBaseException(ApiErrorDescs::ERR_UNKNOW_ERROR, "您当前的可用金额为：".($vminfo['available_money'])." 对不起，可用余额不足，不能投标!");        }        $new_interest_rate = $binfo['borrow_interest_rate'];        $hasBorrowMoney    = $binfo['has_borrow'];        if ( ($binfo['borrow_money'] - $hasBorrowMoney - $money) < 0 ){            throw new ApiBaseException(ApiErrorDescs::ERR_UNKNOW_ERROR, "对不起，此标还差".( $binfo['borrow_money'] - $hasBorrowMoney )."元满标，您最多投标".( $binfo['borrow_money'] - $hasBorrowMoney )."元");        }        $borrow_invest_table = 'borrow_investor_'.intval($borrow_id%3);        $invest_detail_table = 'investor_detail_'.intval($uid%5);        /**         * Borrow_invest         */        $investinfo = [];        $investinfo['status'] = 0;        $investinfo['borrow_id'] = $borrow_id;        $investinfo['investor_uid'] = $uid;        $investinfo['borrow_uid'] = $binfo['borrow_uid'];        $investinfo['investor_capital'] = $money;        $investinfo['borrow_fee'] = number_format($investinfo['investor_capital'] * $binfo['borrow_fee']/100,2);        $investinfo['is_auto']  = $_is_auto;        $investinfo['add_time'] = time();        $invest_info_id = 0;        $db = \Yii::$app->getDb();        $transaction = $db->beginTransaction();        $savedetail = [];        switch ($binfo['repayment_type']){            case 1 :                $investinfo['investor_interest'] = number_format( $new_interest_rate / 360 * $investinfo['investor_capital'] * $binfo['borrow_duration'] / 100, 4 );                $investinfo['invest_fee'] = 0;                $brwIntor = new BorrowInvest();                $invest_info_id = $brwIntor->add($investinfo);                $investinfo['id'] = $invest_info_id;                $subBrwInTor = new BorrowInvest(['tableName' => $borrow_invest_table]);                $subBrwInTor->add( $investinfo );                $investdetail['borrow_id'] = $borrow_id;                $investdetail['invest_id'] = $invest_info_id;                $investdetail['investor_uid'] = $uid;                $investdetail['borrow_uid'] = $binfo['borrow_uid'];                $investdetail['capital'] =  $investinfo['investor_capital'];                $investdetail['interest'] = $investinfo['investor_interest'];                $investdetail['interest_fee'] = $investinfo['invest_fee'];                $investdetail['status'] = 0;                $investdetail['sort_order'] = 1;                $investdetail['total'] = 1;                $savedetail[] = $investdetail;                break;            case 2 :                $monthData['type'] = "all";                $monthData['money'] = $investinfo['investor_capital'];                $monthData['year_apr'] = $new_interest_rate;                $monthData['duration'] = $binfo['borrow_duration'];                $repay_detail = ApiUtils::equalmonth( $monthData );                $investinfo['investor_interest'] = $repay_detail['repayment_money'] - $investinfo['investor_capital'];                $investinfo['invest_fee'] = 0;                $brwIntor = new BorrowInvest();                $invest_info_id = $brwIntor->add($investinfo);                $investinfo['id'] = $invest_info_id;                $subBrwInTor = new BorrowInvest(['tableName' => $borrow_invest_table]);                $subBrwInTor->add($investinfo);                $monthDataDetail['money'] = $investinfo['investor_capital'];                $monthDataDetail['year_apr'] = $new_interest_rate;                $monthDataDetail['duration'] = $binfo['borrow_duration'];                $repay_list = ApiUtils::equalmonth( $monthDataDetail );                $i = 1;                foreach ( $repay_list as $key => $v ){                    $investdetail['borrow_id'] = $borrow_id;                    $investdetail['invest_id'] = $invest_info_id;                    $investdetail['investor_uid'] = $uid;                    $investdetail['borrow_uid'] = $binfo['borrow_uid'];                    $investdetail['capital'] = $v['capital'];                    $investdetail['interest'] = $v['interest'];                    $investdetail['interest_fee'] = 0;                    $investdetail['status'] = 0;                    $investdetail['sort_order'] = $i++;                    $investdetail['total'] = $binfo['borrow_duration'];                    $savedetail[] = $investdetail;                }                break;            case 3 :                $monthData['month_times'] = $binfo['borrow_duration'];                $monthData['account'] = $investinfo['investor_capital'];                $monthData['year_apr'] = $new_interest_rate;                $monthData['type'] = "all";                $repay_detail = ApiUtils::equalseason( $monthData );                $investinfo['investor_interest'] = $repay_detail['repayment_money'] - $investinfo['investor_capital'];                $investinfo['invest_fee'] = 0;                $brwIntor = new BorrowInvest();                $invest_info_id = $brwIntor->add($investinfo);                $investinfo['id'] = $invest_info_id;                $subBrwInTor = new BorrowInvest(['tableName' => $borrow_invest_table]);                $subBrwInTor->add( $investinfo );                $monthDataDetail['month_times'] = $binfo['borrow_duration'];                $monthDataDetail['account'] = $investinfo['investor_capital'];                $monthDataDetail['year_apr'] = $new_interest_rate;                $repay_list = ApiUtils::equalseason( $monthDataDetail );                $i = 1;                foreach ( $repay_list as $key => $v ){                    $investdetail['borrow_id'] = $borrow_id;                    $investdetail['invest_id'] = $invest_info_id;                    $investdetail['investor_uid'] = $uid;                    $investdetail['borrow_uid'] = $binfo['borrow_uid'];                    $investdetail['capital'] = $v['capital'];                    $investdetail['interest'] = $v['interest'];                    $investdetail['interest_fee'] = 0;                    $investdetail['status'] = 0;                    $investdetail['sort_order'] = $i++;                    $investdetail['total'] = $binfo['borrow_duration'];                    $savedetail[] = $investdetail;                }                break;            case 4 :                $monthData['month_times'] = $binfo['borrow_duration'];                $monthData['account'] = $investinfo['investor_capital'];                $monthData['year_apr'] = $new_interest_rate;                $monthData['type'] = "all";                $repay_detail = ApiUtils::equalEndMonth( $monthData );                $investinfo['investor_interest'] = $repay_detail['repayment_account'] - $investinfo['investor_capital'];                $investinfo['invest_fee'] = 0;                $investinfo['recommend_id'] = $recommend_id;                $brwIntor = new BorrowInvest();                $invest_info_id = $brwIntor->add($investinfo);                unset($investinfo['recommend_id']);                $investinfo['id'] = $invest_info_id;                $subBrwInTor = new BorrowInvest(['tableName' => $borrow_invest_table]);                $subBrwInTor->add( $investinfo );                $monthDataDetail['month_times'] = $binfo['borrow_duration'];                $monthDataDetail['account'] =  $investinfo['investor_capital'];                $monthDataDetail['year_apr'] = $new_interest_rate;                $repay_list = ApiUtils::equalEndMonth( $monthDataDetail );                $i = 1;                foreach ( $repay_list as $key => $v ) {                    $investdetail = array();                    $investdetail['borrow_id'] = $borrow_id;                    $investdetail['invest_id'] = $invest_info_id;                    $investdetail['investor_uid'] = $uid;                    $investdetail['borrow_uid'] = $binfo['borrow_uid'];                    $investdetail['capital'] = $v['capital'];                    $investdetail['interest'] = $v['interest'];                    $investdetail['interest_fee'] = 0;                    $investdetail['status'] = 0;                    $investdetail['sort_order'] = $i++;                    $investdetail['total'] = $binfo['borrow_duration'];                    $savedetail[] = $investdetail;                }                break;            case 5 :                $monthData['month_times'] = $binfo['borrow_duration'];                $monthData['account'] = $investinfo['investor_capital'];                $monthData['year_apr'] = $new_interest_rate;                $monthData['type'] = "all";                $repay_detail = ApiUtils::equalendmonthonly( $monthData );                $investinfo['investor_interest'] = $repay_detail['repayment_account'] - $investinfo['investor_capital'];                $investinfo['invest_fee'] = 0;                $investinfo['recommend_id'] = $recommend_id;                $brwIntor = new BorrowInvest();                $invest_info_id = $brwIntor->add($investinfo);                unset($investinfo['recommend_id']);                $investinfo['id'] = $invest_info_id;                $subBrwInTor = new BorrowInvest(['tableName' => $borrow_invest_table]);                $subBrwInTor->add( $investinfo );                $monthDataDetail['month_times'] = $binfo['borrow_duration'];                $monthDataDetail['account'] = $investinfo['investor_capital'];                $monthDataDetail['year_apr'] = $new_interest_rate;                $monthDataDetail['type'] = "all";                $repay_list = ApiUtils::equalendmonthonly( $monthDataDetail );                $investdetail['borrow_id'] = $borrow_id;                $investdetail['invest_id'] = $invest_info_id;                $investdetail['investor_uid'] = $uid;                $investdetail['borrow_uid'] = $binfo['borrow_uid'];                $investdetail['capital'] = $repay_list['capital'];                $investdetail['interest'] = $repay_list['interest'];                $investdetail['interest_fee'] = 0;                $investdetail['status'] = 0;                $investdetail['sort_order'] = 1;                $investdetail['total'] = 1;                $savedetail[] = $investdetail;                break;        }        $investDtl = new InvestDeta(['tableName' => $invest_detail_table]);        foreach ($savedetail as $key => $val){            $invest_defail_id = $investDtl->add($val);        }        if(empty($invest_defail_id) || empty($invest_info_id)){            $transaction->rollback();            throw new ApiBaseException(ApiErrorDescs::ERR_INVEST_FAIL);        }        $ret = BorrowInfo::updateHasBorrow($borrow_id, $money);        if(!$ret){            $transaction->rollback();            throw new ApiBaseException(ApiErrorDescs::ERR_INVEST_FAIL);        }        $transaction->commit();        return $invest_info_id;    }}